Our database design satisfies Boyce-Codd Normal Form (BCNF) and all lower normal forms for most of its relations. Each table was analyzed for its functional dependencies, and the design was refined so that for every dependency, the determinant (the attribute or set of attributes on the left-hand side) is a superkey of the relation. Whenever a determinant was not a superkey, the attributes depending on it were separated into their own relations. This ensures that the database avoids redundancy, update anomalies, and transitive dependencies,making it compliant with BCNF.


One of the clearest examples of this normalization process can be seen in how the Rating entity was separated from the Resource entity. Originally we considered storing rating information, such as the score and date, directly within the resource table. However, doing so would violate BCNF and even Third Normal Form (3NF), because each resource can have multiple independent ratings from different users. By creating a separate Rating relation with its own primary key (ratingId) and a foreign key linking back to the resourceId, we can store multiple distinct ratings for each resource. This design not only maintains normalization but also allows for flexibility,supporting attributes such as the rating’s date and the poster (the user who provided the rating) without redundancy.


Another example of normalization in our design involves keywords associated with resources. Because each resource can have multiple keywords, storing them as a single attribute (for example, as a comma-separated list) would violate the First Normal Form (1NF), which requires all attributes to be atomic. To address this, the keywords were moved into their own relation, where each tuple represents a single keyword-resource pair. This ensures that the database adheres to BCNF by removing any multi-valued dependencies.


The design also incorporates specialization (disjoint subtypes) to achieve normalization while maintaining clarity. The Resource entity is divided into subtypes such as Text, Image, Video, Website, and PDF, each containing attributes specific to that media type. This prevents null values and unnecessary attributes in a single table, such as having a “duration” column left empty for non-video resources. Similarly, the User entity has a Professor subtype, which allows us to store additional attributes like verification badges for professors without cluttering the general user table with unused fields or nullable attributes like isProfessor. These specializations respect normalization principles by ensuring that each entity contains only attributes relevant to its function.


In conclusion, the database achieves Boyce-Codd Normal Form through careful separation of entities and use of specialization. Every relation in the design is structured so that all non-key attributes depend solely on their primary keys, with no transitive or partial dependencies. This results in a clean and logically consistent database schema that minimizes redundancy across all entities and relationships.